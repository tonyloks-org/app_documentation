import logging
import requests
from datetime import datetime
import json
from typing import List, Dict, Any, Optional

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–ê ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] [%(name)s] %(message)s'
)
logger = logging.getLogger("click_ru_to_clickhouse")


# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö CLICK.RU ---
API_URL = "https://api.click.ru/V0/users"
API_TOKEN = "657657dsleofkmf34256noisdfbfo34354a"  # <--- –í–ê–® API –¢–û–ö–ï–ù
USER_ID = "111111111"                            # <--- –í–ê–® UID


# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö CLICKHOUSE ---
CH_HOST = "localhost"               # –•–û–°–¢ CLICKHOUSE
CH_PORT = "8123"                    # –ü–û–†–¢ CLICKHOUSE
CH_USER = "default"                 # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ CLICKHOUSE
CH_PASSWORD = "123"                 # –ü–ê–†–û–õ–¨ CLICKHOUSE
CH_DATABASE = "test_db"             # <--- –ò–ú–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• CLICKHOUSE
CH_TABLENAME = "click_ru_balances"  # <--- –ò–ú–Ø –¢–ê–ë–õ–ò–¶–´ CLICKHOUSE
# ---------------------


# --- –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö CLICKHOUSE ---
CLICKHOUSE_URL: str = f"http://{CH_HOST}:{CH_PORT}/"
CLICKHOUSE_HEADERS: Dict[str, str] = {
    "X-ClickHouse-User": CH_USER,
    "X-ClickHouse-Key": CH_PASSWORD,
    "Content-Type": "application/json"
}
CLICKHOUSE_TIMEOUT: int = 4


# --- –ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• CLICKHOUSE ---
CREATE_DATABASE_QUERY = f"CREATE DATABASE IF NOT EXISTS {CH_DATABASE}"
# --- –ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ CLICKHOUSE ---
CREATE_USER_ACCOUNTS_TABLE_QUERY = f"""
CREATE TABLE IF NOT EXISTS {CH_DATABASE}.{CH_TABLENAME} (
    id UInt64,
    login String,
    type String,
    email Nullable(String),
    description String,
    firstName String,
    lastName String,
    middleName String,
    balance Float64,
    createdAt DateTime,
    export_time DateTime DEFAULT now()
) ENGINE = MergeTree()
ORDER BY id
"""
# --- –ó–ê–ü–†–û–° –ù–ê –û–ß–ò–°–¢–ö–£ –¢–ê–ë–õ–ò–¶–´ CLICKHOUSE ---
TRUNCATE_TABLE_QUERY = f"TRUNCATE TABLE {CH_DATABASE}.{CH_TABLENAME}"
# --- –ó–ê–ü–†–û–° –ù–ê –í–°–¢–ê–í–ö–£ –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£ CLICKHOUSE ---
INSERT_USER_ACCOUNTS_QUERY = f'INSERT INTO {CH_DATABASE}.{CH_TABLENAME} FORMAT JSONEachRow'


def get_click_ru_users_accounts_from_api() -> Optional[List[Dict[str, Any]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ API Click.ru.

    Args:
        –ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã API_URL, API_TOKEN, USER_ID.

    Returns:
        Optional[List[Dict[str, Any]]]:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω.
            None ‚Äî –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.

    Raises:
        –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Ä—É–∂—É, –≤—Å–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None.
    """
    api_request_headers: Dict[str, str] = {
        "Accept": "application/json",
        "X-Auth-Token": API_TOKEN,
        "X-Auth-UserId": USER_ID
    }
    try:
        logger.info("[CLICK_RU_API_REQUEST] –ó–∞–ø—Ä–æ—Å –∫ Click.ru API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")  # –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô_–Ø–ö–û–†–¨: –ó–∞–ø—Ä–æ—Å –∫ API
        api_response = requests.get(API_URL, headers=api_request_headers, timeout=15)
        api_response.raise_for_status()
        accounts_list: List[Dict[str, Any]] = api_response.json()['response']['users']
        logger.info(f"[CLICK_RU_API_RESPONSE] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(accounts_list)}")  # –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô_–Ø–ö–û–†–¨: –û—Ç–≤–µ—Ç API
        return accounts_list
    except Exception as api_exception:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Click.ru API: {api_exception}") from api_exception


def execute_clickhouse_query(query: str, data: Optional[str] = None) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∫ ClickHouse —á–µ—Ä–µ–∑ HTTP-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

    Args:
        query (str): SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        data (Optional[str]): –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON –¥–ª—è INSERT). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.

    Raises:
        requests.RequestException: –ü—Ä–∏ –æ—à–∏–±–∫–µ HTTP-–∑–∞–ø—Ä–æ—Å–∞.
    """
    request_params = {"query": query}
    
    try:
        if data is not None:
            logger.info(f"[CLICKHOUSE_QUERY] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {query[:60]}... [data length: {len(data)}]")  # –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô_–Ø–ö–û–†–¨: ClickHouse Insert
            response = requests.post(
                CLICKHOUSE_URL,
                params=request_params,
                data=data,
                headers=CLICKHOUSE_HEADERS,
                timeout=CLICKHOUSE_TIMEOUT
            )
        else:
            logger.info(f"[CLICKHOUSE_QUERY] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query[:80]}")  # –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô_–Ø–ö–û–†–¨: ClickHouse Query
            response = requests.post(
                CLICKHOUSE_URL,
                params=request_params,
                headers=CLICKHOUSE_HEADERS,
                timeout=CLICKHOUSE_TIMEOUT
            )
        response.raise_for_status()
        logger.info("[CLICKHOUSE_OK] –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")  # –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô_–Ø–ö–û–†–¨: ClickHouse OK
    except Exception as ch_exc:
        raise


def prepare_clickhouse_user_accounts_data_in_json(accounts: List[Dict[str, Any]]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse.

    Args:
        accounts (List[Dict[str, Any]]): –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ Click.ru API.

    Returns:
        str: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
    """
    prepared_data: List[Dict[str, Any]] = []
    for user in accounts:
        prepared_data.append({
            "id": user["id"],
            "login": user.get("login", ""),
            "type": user.get("type", ""),
            "email": user.get("email"),
            "description": user.get("description", ""),
            "firstName": user.get("firstName", ""),
            "lastName": user.get("lastName", ""),
            "middleName": user.get("middleName", ""),
            "balance": float(user.get("balance", 0)),
            "createdAt": datetime.strptime(
                user["createdAt"], "%Y-%m-%dT%H:%M:%S%z"
            ).strftime("%Y-%m-%d %H:%M:%S")
        })

    # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
    prepared_data_in_json = '\n'.join(json.dumps(row) for row in prepared_data)
    return prepared_data_in_json



def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π user_accounts –≤ ClickHouse.
    –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API Click.ru.
    """
    try:
        logger.info("[START] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Click.ru ‚Üí ClickHouse")  
        data = get_click_ru_users_accounts_from_api()
        if not data:
            logger.error("[NO_DATA] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Click.ru API. –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")  
            return

        logger.info("[PREPARE] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ClickHouse") 
        prepared_data_in_json = prepare_clickhouse_user_accounts_data_in_json(data)

        logger.info("[CLICKHOUSE_DB] –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") 
        execute_clickhouse_query(CREATE_DATABASE_QUERY)

        logger.info("[CLICKHOUSE_TABLE] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")  
        execute_clickhouse_query(CREATE_USER_ACCOUNTS_TABLE_QUERY)

        logger.info("[CLICKHOUSE_TRUNCATE] –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö") 
        execute_clickhouse_query(TRUNCATE_TABLE_QUERY)

        logger.info(f"[CLICKHOUSE_INSERT] –í—Å—Ç–∞–≤–∫–∞ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤ ClickHouse") 
        execute_clickhouse_query(INSERT_USER_ACCOUNTS_QUERY, data=prepared_data_in_json)

        logger.info("[SUCCESS] ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")  
    except Exception as e:
        logger.critical(f"[FATAL] üî¥ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")  



if __name__ == "__main__":
    main()